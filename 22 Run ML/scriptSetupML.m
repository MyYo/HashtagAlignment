% This script will set up ML by opening an instance, copying etc.
% To launch ml instance in aws, we will be following instructions by:
% https://aws.amazon.com/blogs/machine-learning/get-started-with-deep-learning-using-the-aws-deep-learning-ami/

%% Inputs
% for additional inputs see scriptGeneratePatches and scriptSortPatchesToTrainTest

% Folders
folderToUpload =  [pwd '\ml\']; % Folder name to upload
folderToUpload_AdditionalCodeAndData = ''; % When set, will copy data and code from that folder EC2 to be uploaded as well.

currentFileFolder = fileparts(mfilename('fullpath'));

%% Get data from Jenkins
if exist('folderToUpload_AdditionalCodeAndData_','var')
    folderToUpload_AdditionalCodeAndData = folderToUpload_AdditionalCodeAndData_;
end

folderToUpload = awsModifyPathForCompetability([folderToUpload '\']);

%% Build folder structure 
if exist(folderToUpload,'dir')
    awsRmDir(folderToUpload);
end
awsMkDir(folderToUpload);

%% Build a dataset 
patchFolder_ = [folderToUpload 'dataset\'];
fprintf('%s Build images dataset...\n',datestr(datetime));
scriptGeneratePatches;
scriptSortPatchesToTrainTest;

%% Combine folder with code to our main upload folder
fprintf('%s Add code and auxilary data...\n',datestr(datetime));

if ~isempty(folderToUpload_AdditionalCodeAndData)
    awsCopyFileFolder(folderToUpload_AdditionalCodeAndData,folderToUpload);
end

%% Copy everything there is to know about how this instance was run
% json_allVaribels is generated by scriptGeneratePatches
awsWriteJSON(json_allVaribels,[folderToUpload 'RunConfig.json']);

%% Copy runme jupyter notebook
copyfile([currentFileFolder '\runme.ipynb'],folderToUpload);

%% Tar directory (to save sapce)
fprintf('%s Tar everything to easy upload...\n',datestr(datetime));

if exist('C:\Program Files\7-Zip\','dir')
    sevenZipFolder = 'C:\Program Files\7-Zip\';
elseif exist('C:\Program Files (x86)\7-Zip\','dir')
    sevenZipFolder = 'C:\Program Files (x86)\7-Zip\';
else
    error('Please Install 7-Zip');
end

[status,txt] = system(sprintf('"%s7z.exe" a -ttar "%s" "%s"',sevenZipFolder,'tmp.tar',folderToUpload));
if (status ~= 0)
    error('Tar error: %s',txt);
end

%% Lunch & prepare instance
fprintf('%s Launching instance...\n',datestr(datetime));

% This function is generated by awsSetCredentials_Private.
awsSetCredentials();
ec2RunStructure = My_ec2RunStructure_DeepLearning();

% Launch instance
ec2Instance = awsEC2StartInstance(ec2RunStructure,'g4dn.4xlarge');

%% Upload data & prepare it in the right folder

% Upload
fprintf('%s Copying files to EC2...\n',datestr(datetime));
awsEC2UploadDataToInstance(ec2Instance,'tmp.tar','~/'); %Copy
delete('tmp.tar'); %Cleanup

%Untar
fprintf('%s Untarring...\n',datestr(datetime));
[status,txt] = awsEC2RunCommandOnInstance (ec2Instance,{...
    'mkdir -p ~/ml'             ... Make a directory
    'tar -xvf tmp.tar -C ~/'  ... Untar
    });
if (status ~= 0)
    awsEC2TerminateInstance(ec2Instance);%Terminate
    error('Untar error: %s',txt);
end

% Folder has been uploaded, cleanup
%awsRmDir(folderToUpload)
fprintf('%s Done...\n',datestr(datetime));
%% Capture information user will need & disconnect from instance

% Capture information to keep for reconnect
dns = ec2Instance.dns;
id = ec2Instance.id;

% Disconnect
awsEC2TemporarilyDisconnectFromInstance(ec2Instance);

% Print information
instructions = sprintf('id_=''%s''; dns_=''%s''; scriptEndML;',id,dns);
disp('Next steps: ');
disp(instructions);
fid = fopen('instructions.txt','w');
fprintf(fid,'%s',instructions);
fclose(fid);
