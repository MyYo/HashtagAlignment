//This Jenkinsfile will preform a scan and save the results to a common storage
//It will also create a .m file explaining how to preprocess this scan
pipeline {
	agent any
	environment {
        MATLAB_PATH = "C:\\Program Files\\MATLAB\\R2019a\\bin\\matlab.exe"
        TEMP_STORAGE = "F:\\Jenkins\\TempDataStorage\\"
    	CREDENTIALS_PATH = "F:\\Jenkins\\"
		GIT_TAG = "master" //Can be "master" or any of the branches 
	}
	options {
		buildDiscarder(logRotator(numToKeepStr: '30', artifactNumToKeepStr: '30')) //Discard old builds
  	}
	parameters 
	{
		string(
			name: "S3_DIR",
			defaultValue:"s3://delazerdamatlab/Users/OCTHistologyLibrary/LB/",
			description:"Subject Directory.\nExample: s3://delazerdamatlab/Users/OCTHistologyLibrary/LA/",
			trim: true)
		string(
			name: "SUBJECT_ID",
			defaultValue:"LB-00",
			description:"Subject Id.\nExample: LB-01",
			trim: true)
		string(
			name: "Z_TO_PHTOBLEACH",
			defaultValue:"-300",
			description:"We assume top of the sample is in focus right now.\nSet this value to the position of the top of the gel as photobleaching will occur at this specified z.\nUnits are um | +z is deeper",
			trim: true)
		string(
			name: "WHO_TO_EMAIL_WHEN_DONE",
			defaultValue:"@stanford.edu",
			description:"Who should get an email with the results? Including you!\nUse comma to specify multiple emails.\nExample: me@stanford.edu, you@stanford.edu",
			trim: true)
		
		//Debug purpose 
		booleanParam(
			name: 'IS_PHOTOBLEACH_TICKMARKS',
			defaultValue:false,
			description:"Set to true if you would like to photobleach tickmarks")
		booleanParam(
			name: 'IS_DEBUG_MODE',
			defaultValue:false,
			description:"Set to true if you would like to do a fast debug scan")
    }
	stages{
		stage("Parameters Check and Env Setup") 
		{steps{script{
			if (params.WHO_TO_EMAIL_WHEN_DONE == "@stanford.edu") 
			{
						currentBuild.result = 'ABORTED'
						echo('Please specify email address to send a note when run is completed')
						error('Please specify email address to send a note when run is completed')
			}
		}}}
		stage("Checkout")
		{steps{script{
			//Branch to checkout
			def branch = env.GIT_TAG
			
			//Identify where github is installed
			def gitFolderOption1 = new File("C:\\Program Files (x86)\\Git\\cmd\\")
			def gitFolderOption2 = new File("C:\\Program Files\\Git\\cmd\\")
			def gitFolder = ""
			if (gitFolderOption1.exists()) {
				gitFolder = gitFolderOption1.absolutePath
			} else if (gitFolderOption2.exists()) {
				gitFolder = gitFolderOption2.absolutePath
			} else {
				error "Clould not find git in the known possible possitions"
			}
			gitFolder = gitFolder + "\\"
			
			//Checkout a fresh copy 
			cleanWs()
			bat('"' + gitFolder + 'git.exe" clone --branch "' + branch + '" --single-branch "https://github.com/MyYo/HashtagAlignment.git"') //Checkout HashtagAlignment
			bat('"' + gitFolder + 'git.exe" clone --branch "' + branch + '" --single-branch "https://github.com/MyYo/myOCT.git"') //Checkout myOCT
			
			//Make note of the repository version
			bat('@cd HashtagAlignment && @"' + gitFolder + 'git.exe" rev-parse HEAD > ..\\commandResult.txt')
			def hashtagAlignmentVer = readFile('commandResult.txt').trim()
			bat('@cd myOCT && @"' + gitFolder + 'git.exe" rev-parse HEAD > ..\\commandResult.txt')
			def myOCTVer = readFile('commandResult.txt').trim()
			
			//Move files to main folder
			bat('@xcopy /E HashtagAlignment . /Y /Q')
			bat('@xcopy /E myOCT . /Y /Q')
			bat('@copy "%CREDENTIALS_PATH%\\*.m" .')
			
			//Delete folder used for checkout
			bat('@rmdir HashtagAlignment /S /Q')
			bat('@rmdir myOCT /S /Q')
			
			//Start buidling the runme file
			bat("@echo disp('HashtagAlignment Git Hash: " + hashtagAlignmentVer + "');  >> runme.m")
			bat("@echo disp('myOCT Git Hash: " + myOCTVer + "');  >> runme.m")
			bat("@echo disp('To see repository go to');  >> runme.m")
			bat("@echo disp('https://github.com/MyYo/HashtagAlignment/tree/" + hashtagAlignmentVer + "'); >> runme.m")
			bat("@echo disp('https://github.com/MyYo/myOCT/tree/"            + myOCTVer + "'); >> runme.m")
		}}}
		stage("Build Runme File")
		{steps{script{
			bat("@echo isDebugFastMode_ = %IS_DEBUG_MODE%; >> runme.m")
			bat("@echo zToPhtobleach_=%Z_TO_PHTOBLEACH%; >> runme.m")
			bat("@echo outputFolder_='%TEMP_STORAGE%\\%SUBJECT_ID%\\OCTVolumes\\'; >> runme.m")
			bat("@echo isDrawTickmarks_=%IS_PHOTOBLEACH_TICKMARKS%; >> runme.m")
			bat("@echo run ScanAndPattern_Thorlabs.m  >> runme.m")
			
			// Move the m file to Testers
			bat("@move runme.m Testers\\ > nooutput")
			
			//Type the result
			bat("""
				@echo off
				echo Testers\\runme.m
				echo ----------------
				type Testers\\runme.m """)
		}}}
		stage("Run Matlab")
		{steps{script{
			try
			{
				//Usefull links
				echo "- Running Matlab log can be found here:\n\t" + env.BUILD_URL + "execution/node/3/ws/Testers/matlablog.txt/*view*/" + "\n" +
					 "- Runme file:\n\t" + env.BUILD_URL + "execution/node/3/ws/Testers/runme.m/*view*/" + "\n" +
					 "- Workspace:\n\t" + env.BUILD_URL + "execution/node/3/ws/"
				
				bat("""cd Testers && "%MATLAB_PATH%" -nosplash -nodesktop -wait -r "runme_Jenkins('runme')" -logfile matlablog.txt""")
			}
			catch(Exception e)
			{
				currentBuild.result = 'FAILURE'
				throw("Matlab Failed")
			}
			finally
			{
				//In any case, copy what we did to log folder
				echo "MATLAB LOG --------------------------------------------------------------------------\n-------------------------------------------------------------------------------------"
				bat('type Testers\\matlablog.txt')
				echo "MATLAB LOG END ----------------------------------------------------------------------\n-------------------------------------------------------------------------------------"
				
				try
				{
					bat('copy Testers\\matlablog.txt "%TEMP_STORAGE%\\%SUBJECT_ID%\\OCTVolumes\\01 OCT Scan and Pattern Log\\"')
					bat('copy Testers\\runme.m "%TEMP_STORAGE%\\%SUBJECT_ID%\\OCTVolumes\\01 OCT Scan and Pattern Log\\"')
					bat('copy Testers\\*.png "%TEMP_STORAGE%\\%SUBJECT_ID%\\OCTVolumes\\01 OCT Scan and Pattern Log\\"')
					
					archiveArtifacts allowEmptyArchive: true, artifacts: 'Testers/matlablog.txt, Testers/runme.m', caseSensitive: true, defaultExcludes: true, fingerprint: false, onlyIfSuccessful: false
				}
				catch(Exception e)
				{
					//Do nothing, its ok if a file is missing from the archive
				}
			}
		}}}
		stage("Leave a Hook for Preprocessing")
		{steps{script{
			//How to preprocess this file
			def foldersDef = 
				"SubjectFolderIn_  = '%TEMP_STORAGE%\\%SUBJECT_ID%\\';" + 
				"SubjectFolderOut_ = '%S3_DIR%/%SUBJECT_ID%/';"	
		
			//Manualy
			def currentDir = pwd()
			bat("""@echo "%MATLAB_PATH%" -r "addpath(genpath('""" + currentDir + "'));" + foldersDef +
				"isRunInAutomatedMode_ = false; cd('" + currentDir + """\\02 OCT Preprocess\\'); runAllPreprocessing; disp('MAKE SURE YOU QUIT MATLAB BEFORE RUNNING JENKINS!');" > "%TEMP_STORAGE%\\%SUBJECT_ID%_runAllPreprocessing_Manualy.bat" """)

			//Automated
			bat("@echo " + foldersDef + """runAllPreprocessing; >> "%TEMP_STORAGE%\\runme_preprocess.m" """)
			
			//println gitFolder
		}}}
	}
	post{ 
		//Using ext-email plugin
		success {
			emailext (
				subject: "[OCTHist] Scan ${currentBuild.result}",
				from : "Yonatan",
				body: "Scan is completed.<br>You can process the volume manualy to $TEMP_STORAGE\\$SUBJECT_ID and run bat file.<br> Or run automatically use <a href='http://localhost:9090/job/Upload%20to%20Cloud%20and%20Preprocess/'> Link </a>. <br> See log for more details <br>Yonatan<br><br>" + 
					"<b>Instructions for Pauline:</b><br>" + 
					"After clearing paraffin (until seeing full face of sample) from the side opposite to the dot<br>" +
					"Cut XX mm in and then:<br>" +
					"- Take 1 section, lose 5 sections of 5um each<br>" +
					"- 3 Sections in each slide<br>" +
					"- 5 slides total<br>"
					,
				attachLog: true,
				attachmentsPattern: "Testers/matlablog.txt, Testers/runme.m, Testers/*.png",
				to: "$WHO_TO_EMAIL_WHEN_DONE" )
		} 
		failure {
			emailext (
				subject: "[OCTHist] Scan ${currentBuild.result}",
				from : "Yonatan",
				body: "See log <br>Yonatan",
				attachLog: true,
				attachmentsPattern: "Testers/matlablog.txt, Testers/runme.m, Testers/*.png",
				to: "$WHO_TO_EMAIL_WHEN_DONE" )
		aborted {
			emailext (
				subject: "[OCTHist] Scan ${currentBuild.result}",
				from : "Yonatan",
				body: "See log<br>Be sure to kill Matlab (run by System) if its still running<br>Yonatan",
				attachLog: true,
				attachmentsPattern: "Testers/matlablog.txt, Testers/runme.m, Testers/*.png",
				to: "$WHO_TO_EMAIL_WHEN_DONE" )
			}
		}
	}
}