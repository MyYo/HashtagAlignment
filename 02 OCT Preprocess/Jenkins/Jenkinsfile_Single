//This Jenkinsfile will preform a scan and save the results to a common storage
//It will also create a .m file explaining how to preprocess this scan
pipeline {
	agent any
	environment {
        MATLAB_PATH = "matlab"
    	CREDENTIALS_PATH = "..\\..\\"
	}
	options {
		buildDiscarder(logRotator(numToKeepStr: '30', artifactNumToKeepStr: '30')) //Discard old builds
  	}
	parameters 
	{
		string(
			name: "SUBJECT_FOLDER_PATH",
			defaultValue:"s3://delazerdamatlab/Users/OCTHistologyLibrary/LB/LB-NA/",
			description:"Subject Directory\nExample: s3://delazerdamatlab/Users/OCTHistologyLibrary/LA/LA-01/",
			trim: true)
		string(
			name: "WHO_TO_EMAIL_WHEN_DONE",
			defaultValue:"",
			description:"Who should get an email with the results?  (Apart from you! - you will get an email anyways)\n\nUse comma to specify multiple emails\nExample: me@stanford.edu, you@stanford.edu",
			trim: true)
		booleanParam(
			name: 'AWS_PARALLEL_COMPUTING',
			defaultValue:true,
			description:"1. Check this box if you would like to use cloud computing (AWS).\n2. Make sure your files are uploaded to Amazon cloud (s3) to be able to use this function.\n3. Please note: 1hr cloud computing is about 1USD.")
    }
	stages{
		stage("Checkout")
		{steps{script{
			//Branch to checkout
			def branch = env.GIT_TAG
			
			//Identify where github is installed
			def gitFolderOption1 = new File("C:\\Program Files (x86)\\Git\\cmd\\")
			def gitFolderOption2 = new File("C:\\Program Files\\Git\\cmd\\")
			def gitFolder = ""
			if (gitFolderOption1.exists()) {
				gitFolder = gitFolderOption1.absolutePath
			} else if (gitFolderOption2.exists()) {
				gitFolder = gitFolderOption2.absolutePath
			} else {
				error "Clould not find git in the known possible possitions"
			}
			gitFolder = gitFolder + "\\"
			
			//Checkout a fresh copy 
			cleanWs()
			bat('"' + gitFolder + 'git.exe" clone --branch "' + branch + '" --single-branch "https://github.com/MyYo/HashtagAlignment.git"') //Checkout HashtagAlignment
			bat('"' + gitFolder + 'git.exe" clone --branch "' + branch + '" --single-branch "https://github.com/MyYo/myOCT.git"') //Checkout myOCT
			
			//Make note of the repository version
			bat('cd HashtagAlignment && "' + gitFolder + 'git.exe" rev-parse HEAD > ..\\commandResult.txt')
			def hashtagAlignmentVer = readFile('commandResult.txt').trim()
			bat('cd myOCT && "' + gitFolder + 'git.exe" rev-parse HEAD > ..\\commandResult.txt')
			def myOCTVer = readFile('commandResult.txt').trim()
			
			//Move files to main folder
			bat('xcopy /E HashtagAlignment . /Y')
			bat('xcopy /E myOCT . /Y')
			bat('copy "%CREDENTIALS_PATH%\\*.m" .')
			
			//Delete folder used for checkout
			bat('rmdir HashtagAlignment /S /Q')
			bat('rmdir myOCT /S /Q')
			
			//Start buidling the runme file
			bat("echo disp('HashtagAlignment Git Hash: " + hashtagAlignmentVer + "');  >> runme.m")
			bat("echo disp('myOCT Git Hash: " + myOCTVer + "');  >> runme.m")
			bat("echo disp('To see repository go to');  >> runme.m")
			bat("echo disp('https://github.com/MyYo/HashtagAlignment/tree/" + hashtagAlignmentVer + "'); >> runme.m")
			bat("echo disp('https://github.com/MyYo/myOCT/tree/"            + myOCTVer + "'); >> runme.m")
		}}}
		stage("Build Runme File")
		{steps{script{
			bat("echo isRunInAutomatedMode_ = true; >> runme.m")
			bat("echo SubjectFolderIn_ = '%SUBJECT_FOLDER_PATH%'; >> runme.m")
			bat("echo SubjectFolderOut_ = '%SUBJECT_FOLDER_PATH%'; >> runme.m")
			bat("echo runAllPreprocessing; >> runme.m")
			
			// Move the m file to Testers
			bat("move runme.m Testers\\")
		}}}
		stage("Run Matlab")
		{steps{script{
			try
			{
				//Usefull links
				echo "- Running Matlab log can be found here:\n\t" + env.BUILD_URL + "execution/node/3/ws/Testers/matlablog.txt/*view*/" + "\n" +
					 "- Runme file:\n\t" + env.BUILD_URL + "execution/node/3/ws/Testers/runme.m/*view*/" + "\n" +
					 "- Workspace:\n\t" + env.BUILD_URL + "execution/node/3/ws/"
				
				bat("""cd Testers && "%MATLAB_PATH%" -nosplash -nodesktop -wait -r "runme_Jenkins('runme',%AWS_PARALLEL_COMPUTING%)" -logfile matlablog.txt""")
				
				//Delete preprocess file
				File file = new File(env.TEMP_STORAGE + "\\runme_preprocess.m")
				if (file.exists()){
					file.delete();
				}  
				currentBuild.result = "SUCCESS"
			}
			catch(Exception e)
			{
				currentBuild.result = 'FAILURE'
				throw("Matlab Failed")
			}
			finally
			{
				//In any case, copy what we did to log folder
				echo "MATLAB LOG --------------------------------------------------------------------------\n-------------------------------------------------------------------------------------"
				bat('type Testers\\matlablog.txt')
				echo "MATLAB LOG END ----------------------------------------------------------------------\n-------------------------------------------------------------------------------------"
				
				//bat('copy Testers\\matlablog.txt "%TEMP_STORAGE%\\%SUBJECT_ID%\\OCT Volumes\\02 OCT Preprocess Log\\"')
				//bat('copy Testers\\runme.m "%TEMP_STORAGE%\\%SUBJECT_ID%\\OCT Volumes\\02 OCT Preprocess Log\\"')
				
				archiveArtifacts allowEmptyArchive: true, artifacts: 'Testers/matlablog.txt, Testers/runme.m', caseSensitive: true, defaultExcludes: true, fingerprint: false, onlyIfSuccessful: false
			}
		}}}
	}
	post{ 
		always {script{
			//Get the email of the user who started the build
			def userId = currentBuild.getRawBuild().getCauses()[0].getUserId()
            hudson.model.User user = hudson.model.User.get(userId)
            email = user.getProperty(hudson.tasks.Mailer.UserProperty).getAddress()
			
			emailext ( //Using ext-email plugin
				subject: "[OCTHist] Processing Completed ${currentBuild.result} #$BUILD_NUMBER",
				from : "Yonatan",
				body: 
				"Hi,<br>" +
				"Your files are processed (Build # $BUILD_NUMBER, $BUILD_STATUS).<br>" +
				"All the files are saved at:<br>" +
				"$SUBJECT_FOLDER_PATH<br>" +
				"See attached files for result summary.<br><br>" + 
				"""To access files on AWS S3, follow <a href="https://s3.console.aws.amazon.com/s3/buckets/delazerdamatlab/Users/?region=us-east-1&tab=overview">Link</a><br>""" +
				"To log in to AWS use:<br>" + 
				"Email address of your AWS account // account ID : 313934313216<br>" +
				"IAM User name: student<br>" +
				"Password: same as your server's password<br><br><br>" +
				"<b> Jenkins Parameters: </b><br>" +
				"SUBJECT_FOLDER_PATH:     $SUBJECT_FOLDER_PATH<br>" +
				"WHO_TO_EMAIL_WHEN_DONE:  $WHO_TO_EMAIL_WHEN_DONE<br>" +
				"AWS_PARALLEL_COMPUTING:  $AWS_PARALLEL_COMPUTING<br>" 
				,
				attachLog: true,
				attachmentsPattern: "Testers//matlablog.txt, Testers//runme.m, //**//*.png",
				to: "$WHO_TO_EMAIL_WHEN_DONE," + email )
		}} 
	}
}